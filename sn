#!/bin/bash

#TODO: Redirecto all commands stdout/stderr to /dev/null

# Pretty print information to the user
function pretty_print {
        echo "==============================================="
        echo "$1"
        echo "-----------------------------------------------"
}

#Verify that the requested network has been created or joined and switch to it
function switch_to_network {
	if ! [ -f .active_network ] ; then echo "No social network has been joined. Use 'sn join <social network>'"; return 1; fi
	active_network=$(cat .active_network)
	if ! [ -d "$active_network" ] ; then echo "The specified social network does not exist. Use 'sn create $active_network' or 'sn join $active_network' first."; return 2; fi
	if ! cd "$active_network" ; then return 3; fi
	pretty_print "You are on the $active_network network"
	return 0
}

# Create an empty network to a folder ending with .netork
function create {
	if [ -z "$1" ] ; then echo "You need to specify a valid social network to create (e.g. sn create cooking)."; exit -1 ; fi
        git init --bare "$1.git"
}

# Join a local or remote netowrk
function join {
	if [ -z "$1" ] ; then echo "You need to specify a valid social network to join (e.g. sn join https://www.github/something/cooking.git/ )."; exit -1; fi
	# strip url and trailing .git if any
	active_network=$(basename -s .git "$1")
	if ! [ -d "$active_network" ] ; then echo "Cloning network..."; git clone -q "$1"; fi
	echo "$active_network" > .active_network
	# If our config file is missing from the repo, then add it, commit and push.
	# Our config file is a json file with our email
	switch_to_network
	if ! [ -f "$my_set_file" ]; then
		echo '{ "posts":0, "followers":[] }' > "$my_set_file";
	fi
	# Add - commit - push our settings file
	pretty_print "Adding any changes to your local settings file back to the network..."
	git add "$my_set_file"
	pretty_print "Committing the changes to the nerwork..."
	git commit -q -m "$my_name joined the network"
	pretty_print "Pushing your changes to others in the network..."
	git push -q origin master
}

function pull {
	if ! switch_to_network ; then exit -1; fi
	pretty_print "Getting latest posts..."
	git pull	
}

function log {
	if ! switch_to_network ; then exit -1; fi
	pretty_print "Posts on this social network"
	git log --oneline
}

function show {
	if ! switch_to_network ; then exit -1; fi
	if [ -z "$1" ]; then exit -1; fi
	pretty_print "Displaying post $1"
	git show -s --format="On: %cD %nUser: %an %nPosted: %s" "$1"
}

function post {
	if ! switch_to_network ; then exit -1; fi
	read -p "Type your post here. When finished, just press the 'Enter' key:  " post_body
	# increase commit number
	current_posts=$(jq '.posts' "$my_set_file" )
	current_posts=$((current_posts+1))
	contents="$(jq '.posts = '"$current_posts" "$my_set_file")" && echo "${contents}" > "$my_set_file"
	pretty_print "Adding your post..."		
	git add "$my_set_file"
	pretty_print "Commiting your post. Do not forget to push your post to the rest of the network with './sn push'"
	git commit -q -m "$post_body"	
}

function like {
	if ! switch_to_network; then exit -1; fi
	echo "Git tag"
}

function push {
	if ! switch_to_network; then exit -1; fi
	pretty_print "Pusing your posts to the network..."
	git push -q origin master
}

function members {
	if ! switch_to_network; then exit -1; fi
        pretty_print "Displaying network members and emails..."
	git log --pretty=format:"User: %an   Email: %ae" | uniq	
}

function follow {
	echo "Git "
}

function unfollow {
	echo "Git ...."
}

function setup {
	echo "First time run. Please fill the followin settings."
	read -p "Enter your name: " name
	read -p "Enter your email: " email
    	if ! [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$ ]]
    	then
        	echo "Email address $email is invalid. Exiting" >&2
        	exit -1
    	fi
	# Set the push to simple 
	if ! git config --global push.default simple; then exit -1; fi
	if ! git config --global user.name "$name" ; then exit -1; fi
    	if ! git config --global user.email "$email" ; then exit -1; fi
}

# Make sure the git command is installed in the system.
if ! [ -x "$(command -v git)" ]; then echo 'Please install the git command first.'; exit -1 ; fi
# Verify that git is setup properly 
if [ -z "$(git config --global -l)" ]  ; then setup ; fi
# Now store my name and email in variables
my_name=$(git config --global --get user.name)
my_email=$(git config --global --get user.email)
my_set_file="$my_email.json"

case $1 in
	create)
	create "$2"
	;;
	join)
	join "$2"	
	;;
	pull)
	pull
	;;
	log)
	log 
	;;
	show)
	show "$2"
	;;
	post)
	post 
	;;
	like)
	like
	;;
	push)
	push
	;;
	members)
	members
	;;
	follow)
	follow
	;;
	unfollow)
	unfollow
	;;
	*)
	echo "sn manual"
	;;
esac

